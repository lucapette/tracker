// Code generated by go-bindata.
// sources:
// categories.csv
// DO NOT EDIT!

package tracker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _categoriesCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\x51\x6e\x83\x30\x0c\x06\xe0\xf7\x9c\x05\xf1\xb0\x1b\x54\xeb\xb6\x03\x74\xd2\x9e\x5d\xe2\x82\x85\x63\x23\x63\xc8\x7a\xfb\x29\x99\x2a\x35\x6c\xaf\x9f\x7f\xff\x10\xf9\x14\x69\x4b\xdd\xab\xa6\xb4\x09\x0d\xe0\xa4\x12\x2e\xf3\x7d\xc1\x83\x01\x59\x02\xe2\x83\xae\x0c\xc3\xdc\x0f\x7a\x6c\xc8\x78\xed\xf3\x04\xbe\xc2\xb2\xfc\x33\x0e\x67\x58\xa7\xee\x8c\x3b\xb2\x2e\x09\xc5\xc3\x48\x3e\x6d\xd7\x1a\x6d\xd8\xe0\x06\x02\x7d\xc4\xbd\x71\xfa\x44\x4b\x2f\x0d\xb1\x0e\xc0\x93\xae\xde\xe8\xea\x30\xcc\xba\xa3\xdd\x58\xf3\x9f\xfa\xf0\x4e\x12\xd1\xba\x0f\x14\x34\xe0\xe0\x86\xcc\x5a\x63\x0f\xca\x6a\x73\xd9\xbd\xb7\x9a\x73\x1f\x37\x65\x92\xb1\x8d\x87\xf2\xe0\x65\xf3\x9e\xb4\x7b\x13\x47\x73\x20\xa9\xdf\x2a\x2b\x82\x7e\x63\xfa\xae\x1b\xed\x34\x24\x2c\x87\xa8\x93\x8b\x0e\x54\x7e\x26\x93\x3b\xda\x33\x95\x0e\x26\x99\x31\x92\x1c\xdd\x30\x46\xf2\x67\x0d\x27\xd7\xd4\x7d\x19\x39\xc9\x58\x33\x23\xf9\x55\xf5\xf7\x60\x0f\xff\x09\x00\x00\xff\xff\x2d\xed\x8e\x2b\x01\x02\x00\x00")

func categoriesCsvBytes() ([]byte, error) {
	return bindataRead(
		_categoriesCsv,
		"categories.csv",
	)
}

func categoriesCsv() (*asset, error) {
	bytes, err := categoriesCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.csv", size: 513, mode: os.FileMode(420), modTime: time.Unix(1488125330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"categories.csv": categoriesCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"categories.csv": &bintree{categoriesCsv, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
