// Code generated by go-bindata.
// sources:
// categories.csv
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _categoriesCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\x51\x6e\x83\x30\x0c\x80\xe1\xf7\x9c\x05\xf1\xb0\x1b\x54\xeb\xb6\x03\x74\xd2\x9e\xdd\xc4\x05\x0b\xc7\x46\xc6\x90\xf5\xf6\x13\x99\x2a\x35\x6c\xaf\x9f\x7f\x4c\x24\x9f\x12\xad\xb9\x7b\xd5\x9c\x57\xa1\x08\x4e\x2a\xe1\x32\xdd\x67\x3c\x18\x90\x65\x20\x3e\xe8\xc2\x10\xa7\x3e\xea\x71\x43\xc1\x6b\x5f\x46\xf0\x05\xe6\xf9\x9f\x71\x38\xc3\x32\x76\x67\xdc\x90\x75\xce\x28\x1e\x06\xf2\x71\xbd\xd6\xb4\x61\x83\x1b\x08\xf4\x09\xb7\xc6\xe9\x13\x2d\xbf\x34\xc4\x1a\x81\x47\x5d\xbc\xd1\xc5\x21\x4e\xba\xa1\xdd\x58\xcb\x9f\xf5\xe1\x9d\x24\xa1\x75\x1f\x28\x68\xc0\xc1\x0d\x99\xb5\x66\x0f\x2a\x6a\xd3\xfe\xed\xbd\xd5\x52\xfa\xb4\x2a\x93\x0c\x6d\x1e\xe6\xd5\x7b\xd2\xee\x4d\x1c\xcd\x81\xa4\xfe\x67\xcf\x05\xfd\xc6\xf4\x5d\xeb\x76\x1a\x32\xee\x47\xa8\x93\x8b\x46\xda\x1f\x52\xc8\x1d\xed\x99\xf6\x1d\x4c\x32\x61\x22\x39\xba\x61\x4a\xe4\xcf\x1a\x4e\xae\xb9\xfb\x32\x72\x92\xa1\x36\x03\xf9\x55\xf5\xf7\x58\x0f\xff\x09\x00\x00\xff\xff\x3a\x5b\x4c\x18\xfd\x01\x00\x00")

func categoriesCsvBytes() ([]byte, error) {
	return bindataRead(
		_categoriesCsv,
		"categories.csv",
	)
}

func categoriesCsv() (*asset, error) {
	bytes, err := categoriesCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categories.csv", size: 509, mode: os.FileMode(420), modTime: time.Unix(1487434424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"categories.csv": categoriesCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"categories.csv": &bintree{categoriesCsv, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
